#!/usr/bin/php
<?php
if (!isset($argv['1'])) {
	printf("USAGE: %s filename\n\n",$argv['1']);
	exit(1);
}
define("FILENAME",$argv['1']);
$err = error_reporting();
error_reporting(~E_ALL);
$zsm = array();
$handle = fopen(FILENAME, "rb");
$fsize = filesize(FILENAME);
$zsm = array_values(unpack("C*",fread($handle, $fsize)));
fclose($handle);
if (sizeof($zsm)==0) {
	print "Error reading input file " . FILENAME . "\n";
	exit(1);
}
error_reporting($err);

$globalreg = array (
	"Undefined Register",
	"Test Register",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"KeyON/OFF",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"Noise Control",
	"Clock A lo",
	"Clock A hi",
	"Clock B",
	"Undefined Register",
	"CTRL Register",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"LFO Frequency",
	"LFO PMD/AMD",
	"Undefined Register",
	"CT / LFO WaveForm",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register",
	"Undefined Register"
);

$chanreg = array (
	"FBCON",
	"KC",
	"KF",
	"PMS AMS"
);

$opreg = array (
	"globals",
	"channels",
	"DT1 MUL",
	"TL",
	"KS AR",
	"AMSen D1R",
	"DT2 D2R",
	"D1L RR"
);

define("HDRSTRING","%16s : %s\n");
define("DIVIDER","------------------------------------------------------------------\n");

printf("Decoding %s:\n", FILENAME);
printf(DIVIDER);
$s = "";
foreach (range(0,15) as $i) $s = $s . sprintf("%02x ",$zsm[$i]);
$s = ltrim($s);
printf(HDRSTRING,"","'zm'  v  loop     pcm      fm psg   rate  pad");
printf(HDRSTRING,"","~~~~~ ~~ ~~~~~~~~ ~~~~~~~~ ~~ ~~~~~ ~~~~~ ~~~~~");
printf(HDRSTRING,"Raw Header",$s);
printf(HDRSTRING,"","");
$value = $zsm[3] + ($zsm[4] << 8) + ($zsm[5] << 16);
$loopoffset = $value;
if ($value == 0) $s = "No Loop";
else if ($value < 16) $s = "No Loop (but should be set to zero)";
else $s = sprintf("0x%02x (%d bytes)",$value,$value);
printf(HDRSTRING,"Loop Offset",$s);
$value = $zsm[6] + ($zsm[7] << 8) + ($zsm[8] << 16);
if ($value == 0) $s = "No PCM";
else if ($value < 16) $s = "Invalid nonzero value!! (less than 16)";
else $s = sprintf("0x%02x (%d bytes)",$value,$value);
printf(HDRSTRING,"PCM Offset",$s);
$a = array();
$value=0;
foreach (range(0,7) as $i)
  if (($zsm[9] >> $i) & 1) {
		array_push($a,"*");
		$value++;
	}
	else {
		array_push($a,".");
	}
$s = sprintf("%2d voices used",$value);
$s = $s . ": " . implode(' ',$a);
printf(HDRSTRING,"",sprintf("%16s%s","","0             7"));
printf(HDRSTRING,"FM Channel Mask",$s);
$a = array();
$value=0;
$x = $zsm[10] + ($zsm[11] << 8);
foreach (range(0,15) as $i)
  if (($x >> $i) & 1) {
		array_push($a,"*");
		$value++;
	}
	else {
		array_push($a,".");
	}
$s = sprintf("%2d voices used",$value);
$s = $s . ": " . implode(' ',$a);
printf(HDRSTRING,"PSG Channel Mask",$s);
printf(HDRSTRING,"",sprintf("%16s%s","","0                             F"));
$value = $zsm[12] + ($zsm[13] << 8);
printf(HDRSTRING,"Tick Rate",sprintf("%d Hz",$value));
printf(DIVIDER);

// begin ZSM data stream
$i=16;
while ($i < sizeof($zsm)) {
  $cmd = $zsm[$i];
	if ($i == $loopoffset)
	  print "---------------------------------- Loop Point ----\n";
  switch (($cmd & 0xc0)>>6) {
  case 0:
	  printf ("PSG write: reg=%02x val=%02x\n",$cmd,$zsm[$i+1]);
    $i+=2;
    break;
  case 2:
  case 3:
		if($cmd == 0x80) print "EOF\n";
		else printf("delay %d\n",$cmd & 0x7f);
    $i++;
    break;
  default:
  	$i++;
  	$n = $cmd & 0x3f;
  	printf("YM write x%02x:\n",$n);
  	while ($n > 0) {
	  	$r = $zsm[$i];
	  	$v = $zsm[$i+1];
		$i += 2;
	  	printf (" - %02x %02x",$r,$v);
		printf (" :: %s\n",decode($r,$v));
	  	$n--;
  	}
  }
}

function decode($r,$v) {
	global $globalreg;
	global $chanreg;
	global $opreg;
	$s = "";
	if ($r == 0x08) $s = sprintf("chan %d : %s = %02x",$v&0x07,$globalreg[8],$v);
	else if ($r < 0x20)  $s = sprintf("%s = %02x",$globalreg[$r],$v);
	else {
	  $chan = $r & 0x07;
	  $op = ($r >> 3) & 0x03;
	  $range = $r >> 5;
	  if ($r < 0x40)  $s = sprintf("chan %d : %s = %02x",$chan,$chanreg[$op],$v);
	  else $s = sprintf("chan %d op %d : %s = %02x",$chan,$op,$opreg[$range],$v);
	}
	return $s;
}

?>
